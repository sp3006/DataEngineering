AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template AutoScalingMultiAZWithNotifications:
  Create a multi-az, load balanced and Auto Scaled sample web site running on an Apache
  Web Server. The application is configured to span all Availability Zones in the
  region and is Auto-Scaled based on the CPU utilization of the web servers. Notifications
  will be sent to the operator email address on scaling events. The instances are
  load balanced with a simple health check against the default web page. **WARNING**
  This template creates one or more Amazon EC2 instances and an Elastic Load Balancer.
  You will be billed for the AWS resources used if you create a stack from this template.'

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    
Resources:
  
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-0080e4c5bc078760e
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup
      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          !Sub |
              #!/bin/bash -ex
              yum install -y httpd;
              echo "<html>Hi Sushant!! Do you like YAML CloudFormation!!</html>" > /var/www/html/index.html;
              cd /var/www/html;
              chmod 755 index.html;
              service httpd start;
              chkconfig httpd on;
      
        
  # an elastic IP for our instance
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyInstance
      
 
  
  #our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
  
  #create load balancer
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Subnets: ['subnet-0e29a1f604fe44497','subnet-08936342e47518122']
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: MyTargetGroup
      LoadBalancerArn:
        Ref: MyLoadBalancer
      Port: '80'
      Protocol: HTTP
     
      
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: '30'    
      VpcId: "vpc-08498a3e728ee0346"   
      Targets:
      - Id: !Ref MyInstance
  #our second EC2 security group
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 192.168.1.1/32


Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - MyLoadBalancer
          - DNSName